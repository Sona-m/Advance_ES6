const numbers = [1,2,3,4,5];
/*for each*/
console.log("For Each")
numbers.forEach((val) => {
    console.log(val);
})

//map
console.log("\nMap")
numbers.map((num) => console.log(num));

console.log("\nFilter")
// filter
const value = numbers.filter((val) => {
  return  val%2 === 0;
})
console.log(value);


// reduce
console.log("\nReduce")
const val = numbers.reduce((accumulator , currNum) => {
    return accumulator + currNum;
})
console.log(val);

// find - first match
console.log("\nFind")
const val1 = numbers.find((num)=> num<3)
console.log(val1);


// findIndex
console.log("\nFind index")
console.log(numbers.findIndex((num) => num>3))

// slice
console.log("\nSlice")
console.log(numbers.slice(1,4));

//sort
console.log("\nsort")
const nums = [3,7,2,-1,1];
console.log(nums.sort())

// concat
console.log("\nConcat")
const c = numbers.concat(nums);
console.log(c);

// fill
console.log("\nFill")
console.log(nums.fill(0));
console.log(nums.fill(1,1,3));

// include
console.log("\nIncludes")
console.log(nums.includes(2));

// join - string , 
console.log("\nJoin")
console.log(nums.join('-'));

// reverse
console.log("\nReverse")
console.log(nums.reverse());

// push - return length
console.log("\nPush")
console.log(nums.push(18)); 
console.log(nums);

//pop - return deleted element
console.log("\nPop")
console.log(nums.pop());

//unshift - add in beg
console.log("\nUnshift")
nums.unshift(0,1,2,4);
console.log(nums)

// shift - remove elem at beg
const a1 = [1,2,3,4]
console.log("\nShift")
a1.shift();
console.log(a1)

console.log("\nindexOf && lastIndexOf")
console.log(a1.indexOf(2));
console.log(a1.lastIndexOf(2));

// every - exec a func on every item of array
console.log("\nEvery")
 const res = a1.every((num )=> num>0)
console.log(res);

//  some - exec a func - returns true if callback returns true for at least one element
console.log("\nSome")
const res1 = numbers.some((num )=> num>4)
 console.log(res1);

// from - creates a shallow copy
console.log("\nFrom")
const str = '123456';
console.log(Array.from(str));
console.log(Array.from(str ,(x) => Number(x)));

// isArray
console.log("\nisArray")
console.log(Array.isArray(nums));

// flat - returns a new array with all the subarrys concatenating into it
console.log("\nFlat")
const arr = [1 ,[2 , [3 , [4]]]];
console.log(arr.flat(3));

// filter- map
console.log("\nFilter-Map")
const arr0 = [10,20,30,40,50];
const res2 = arr0.filter((num) =>{
    return num> 30
}).map((item)=> item*10)
console.log(res2);

// map-filter
console.log("\nMap-Filter")
const arr1 = [10,20,30,40,50];
const res3 = arr1.map((num)=> num*100).filter((item)=> item>1000);
console.log(res3);

console.log("\nSplit")

const b = 'how are you doing';
console.log(b.split(""));
console.log(b.split("" , 3));